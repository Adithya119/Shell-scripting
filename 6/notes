# class-6 notes

# https://directdevops.blog/2020/09/01/linux-classroom-series-01-sept-2020/

# ############################   Key take away's:-  #################################

# ##########   Always write negative statements 1st & at last when all postive negative cases are checked, write positive command.
# in all of the files in this folder, we have written negative 1st.

----

####  Some examples of popular conditions  ####   ---> refer practice.sh file 

note:- commands 4 & 5 yield the same result but have slighly different syntax
---

# create_dir.sh          # This is not a proper code coz the last line won't even be read by bash coz script terminates before.
# hence refer "create_dir_file.sh" on how to properly write the code.

****  may be if-then-else is a better way of writing code than if-then-exit  ****
---

###### if-then-else  ######

1)
# if-then-else_1.sh       # my way => used positive statement 1st
# if-then-else_2.sh       # trainer's way => negative statement 1st    ==> similar to writing 'fail' module as the 1st task in Ansible playbook

2)
# if-then-else-arg.sh
1st stmt is just an if-then-exit stmt which checks if filename is empty (always check negative case 1st)
2nd stmt checks 2 possibilities using if-then-else stmt: 
    (i) if the given file is not found (another possible negaive case)
    (ii) if file exists, do something (positive case)
----


# Till now we have passed only 1 arg. Let's see how to write code for 3 args:-

# Lets try to write a shell script which creates a specified file in the specified directory with specified content. So argument list should be:- 
./createfile.sh <directory_path> <filename> <file_contents>

refer "createfile.sh"    
# (we didn't have to use if-then-else in this script)


# Note:-
$#    --> this tells no. of args you have passed to your script

# check if the directory exists, if it doesnot exist, create directory. If for some reason, dir creation fails, print "cannot create directory" & do exit 1 because there's no point in continuing with this script anymore:-

if [[ ! -d ${directory_name} ]]; then
    mkdir ${directory_name} || { echo "Cannot create directory"; exit 1; }   ### combining multiple conditions with and & or statements

# Note:-
if [[ ! -d
write -d first & then give ! # --> make this a habit coz it's easy to remember

# ||  ---> this denotes 'or' operation
---

# Note:- do bash -x & see what commands its reading & executing:-

[ec2-user@ip-172-31-45-220 6]$ bash -x ./createfile.sh testing-2 1.txt "line-1"
+ dir_path=testing-2
+ file_name=1.txt
+ file_content=line-1
+ [[ 3 -ne 3 ]]
+ [[ ! -d testing-2 ]]
+ echo 'The entered directory testing-2 doesn'\''t exist. Hence creating testing-2...'
The entered directory testing-2 doesn't exist. Hence creating testing-2...
+ mkdir testing-2
+ [[ ! -f testing-2/1.txt ]]
+ echo 'The entered file 1.txt doesn'\''t exist. Hence creating 1.txt...'
The entered file 1.txt doesn't exist. Hence creating 1.txt...
+ touch testing-2/1.txt
+ echo 'adding contents to 1.txt...'
adding contents to 1.txt...
+ echo line-1
+ cat testing-2/1.txt
line-1

----

# Note:-
In command line usage when arguments are in <> they are required arguments and if the arguments are in [] they are optional.
---

# Dealing with y/n options in interactive scripts:-

#### refer yes-no.sh

# Note:-
# shell script is case sensitive

reply,,  # ->  ,, this converts to lower case
reply^^  # ->  ^^ this converts to upper case

----
# class-8 notes
# https://directdevops.blog/2020/09/03/linux-classroom-series-03-sept-2020/

# Looping constructs in bash scripting cont.... ()
# 3) Counting directories & files (mistakes)
# 4) Nested Loops
# 5) Redirecting loop output
# 6) while and until loops

----


# mkdir dir{1..10}   To create 10 directories using 1 command

# Whenever you end up seeing script failure, do 'bash -x' to analyse.
---

3) Counting directories & files (mistakes)

# diff between single & double quotes [[ ]]
# "if-then-elif-then-fi" used inside "for" loop in the 1st script

# Note:
In 1st script, inside the for loop, the "$dir_path" is not 'expanding'. But in 2nd script, it is expanding. (check via bash -x for both scripts).

# Note:
script-1  --->  To check what value(s) is being assign to 'path' in the for loop, give:- echo "processing ${path}" ==> this is just like giving echo $PATH, echo $MAVEN_HOME, echo $JAVA_HOME in Jenkins jobs   ===> useful for troubleshooting purpose.

In script 1, path is being processed as "/home/ubuntu/contents/*"  which is incorrect --> it should expand what's inside that dir.
But in script-2, it is processing all the files/directories inside it.

For remaining scripts' notes, check  #output written inside the scripts.

* * * But as of this class, I understood that for some reason, when you use 'if' stmt inside 'for' stmt, it's not properly processing the 'if' stmt. * * *


# Note:-
Q) To reuse last commands output:-
A) echo $(!!)      # you can enclose it in "" ==> echo "$(!!)"

----


4)
Nested loop:- 
# Loop within a loop

refer 'nested.sh'

----


5) 
Redirecting loop output to a file:-

refer 'redirect.sh' ==> # same as 'nested.sh' but output will not be displayed on console screen but will be redirected to whichever path you give.

>> row-col.txt
# redirecting should be done at 'done' level.

----


6)
while and until loops:-

# While loop definition:-
be in the loop as long as the condition is true. 
If not, exit the loop.

# Note:-
# while doing any arithmetic expression, always use double brackets  (refer 2/arithmetic.sh) & below:-
ex:- (( COUNT-- ))
# echo $(( $number + 1 )) --> arithmetic.sh

# using arithmetic inside while loop can be a challenge because all of these work & yield the same result:-

[ $COUNT -gt 0 ]     # refer while-2.sh
[[ COUNT -gt 0 ]]    # $ is not needed when using [[ ]]

(( COUNT >= 0 ))   # refer while-1.sh
--

# Until loop definition:-
be in the loop as long as the condition is false   (opposite of 'while' loop)

refer 'until.sh'

---------

# Note:-
You can choose any of 'for', 'while' or 'until' loop based on your choice & also based on which looping construct suits better for your code/logic.
# class-9 notes
# https://directdevops.blog/2020/09/04/linux-classroom-series-04-sept-2020/

# 1) Reading input from files
# 2) Functions (building blocks for Reusability)

----

1) 
Reading input from files:-

script-1.sh  # trainer's file
script-2.sh  # mine

# Firstly, lets understanding of the && operation in the below stmt :-

ping -c1 "${item}" && echo "This server is up: ${item}" >> status.output

# This means, if both ping & echo commands are successful, then only redirect the output to 'status.output'. 

# "echo $?" shows "2" after running 'ping -c1 xcloud.com'. That's why "ping xcloud.com" is not being redirected to 'status.output'. This is the logic behind the use of && in-between the 2 statements.
---

# Secondly, lets understand what is wrong with this stmt (although it doesnt error out, it just doesnt give us what we need exactly) :-

ping -c1 "${item}" && echo "This server is up: ${item}" >> status.output

# This is used in 'script-1.sh' & is redirecting only the echo statement's output & not the ping's output. 1st I tested this on CLI. Because it's only redirecting the last stmt's (echo, in our case) output, it's printing the 1st stmt's (ping, in our case) output on the console screen while execution. ---> this issue is fixed in 'script-2.sh'
---

( ping -c1 "${item}" && echo "This server is up: ${item}" ) >> status.output
# script-2.sh is redirecting both the outputs coz I have enclosed ping && echo stmts within ( ). 1st I tested this on CLI.
---

( ping -c1 "${item}" && echo "This server is up: ${item}" ) >> status.output || echo "${item} is not up"
# redirect to status.output only if both ping & echo commands are successful. If not, print "${item} is not up".

----


2) 
Functions (building blocks for Reusability)

# Definition:-
A 'Function' is a re-usable block of code.  (Refer blog notes for some more content)

Main principle/usage of Function is:- DRY principle (Donâ€™t Repeat Your Self)

We will cover the following aspects regarding 'Functions' :-

(i)    Introduction
(ii)   Passing Parameters to the functions       # class-10
(iii)  Variable scope                            # class-10
(iv)   Returning values from functions           # class-10 & 11
(v)    Recursive functions                       # class-11

(i)    Introduction:-

Run 'declare -F' on CLI (The output of this command might vary with distribution)
# declare -F | less
# ALso try with -f (small f)  -----> will display all the configured functions along with their code.

# 1) declare -F | grep quote
# 2) type quote                 ----> this will display the code of quote function
#
quote $USER 
echo $(quote $USER)
# both of the above commands should print the value of USER in quotes, coz that's the logic written inside quote function.
ex:- 'ubuntu', 'ec2-user'
--

# Functions can be created using the following two syntaxes:-

Syntax 1:-

function-name() {
    <code to be executed>
}
--

Syntax 2:-                                 # paranthesis () are not needed if you're defining a function with the 'function' keyword.

function <function-name> {
    <code to be executed>
}

# In these function blocks/syntaxes, we don't have do & done blocks coz we have curly brackets { }
--

The scope of the function is inside the shell script. That's why it wont print anything unless you call the function:- 
refer 'function-demo.sh' notes.

After calling the function (function-2.sh), you'll be able to see the output of the function when you run 'function-2.sh' on CLI.
But, you won't see the output when you run the function 'show_system_details' directly on CLI:-

# [ec2-user@ip-172-31-45-220 9]$ show_system_details
# -bash: show_system_details: command not found
--

Hence, to make a function available to end users without them having to run a script, you need to export it this way:-
(To see the output when you run the function 'show_system_details' directly on CLI)

(i) paste this function in the bottom of .bashrc file in the user's home dir:-

show_system_details() {
    echo "Uptime is"
    uptime
    echo "Cpu details"
    lscpu
    echo "User list"
    who
}

(ii) source .bashrc

(iii) show_system_details  # run this on CLI
# it will show:- uptime, lscpu, who & whichever you write inside that function

****************************
After doing the above, "show_system_details" command will work & will show the desired output (same output as the output of 'function-2.sh' script). I guess this is how you can create customized commands for your team. 
****************************

# Now, these will also work:-
type show_system_details       ---->  this will display the code of 'show_system_details' function
declare -f will list 'show_system_details' function along with it's code.
--


*****************
# write a script which creates back-up of a file --> trainer included this code in the same 'function-demo.sh' file. I have written separately. Refer 'backup.sh' & 'backup-2.sh'

is_file --> is a function. The trick is to just write your shell script/code inside a function

# side note:
# trainer said indentation doesn't matter while he was writing an if stmt.
--

Dealing with functions is different when it comes to giving arguements:-
# Refer 'backup.sh' :-
I gave arg next to script name (it's not taking it):-
# [ec2-user@ip-172-31-45-220 9]$ ./backup.sh /home/ec2-user/1.txt
# Please provide a file name which needs back up
Even though I gave an arg next to the scriptfile name ${0}, it's not detecting it. Hence, trainer gave arg (filename) inside the script file in this form:-
# Refer 'backup-2.sh'
# <function_name> <filepath>   
he called the function & gave filepath (arg) right next to it & it worked as shown below:-

# [ec2-user@ip-172-31-45-220 9]$ ./backup-2.sh         --> no arg given here. arg given inside the script
# file is copied to /home/ec2-user/1.txt.bak

***************************
Hence, when dealing with functions, give args to the function name, not to the script name
***************************


**********************************
Look at backup-2.sh file's notes for a clear explanation of that code
**********************************
# class-7 notes
# https://directdevops.blog/2020/09/02/linux-classroom-series-02-sept-2020/

# Special parameters
# Setting default values to parameters
# Looping constructs in bash scripting ('for' loop, IFS)

----

### Special parameters  --> (refer blog)
$-

h: This is short for hash all    # this allows your programs to be found using the $PATH parameter
i: Shows its and interactive shell
m: This is short for monitor     # this allows you to move commands in & out of bg (background)
B: This allows brace expansion. â€œ`mkdir dir{1,2}
H: This allows history expansion of running commands

# whenever you are running bash, it utilizes all the above.
----

# ############    Note:- Always use variables in double quotes --> it will resolve lot of issues    ########################
ex:- "${file_name}", echo "${courses[$index]}"

----


####  Setting default values to parameters  ####

refer default-1.sh          ==>  my own script
refer default-trainer.sh    ==>  trainer's script
# either of the above are fine but are basic. 

# Hence look at "default-2.sh" for simpler & professional logic.
Syntax used in default-2.sh is:-

#     ${parameter-"default"}     ==>  if parameter is not provided by user, use "default"

----

#### Looping constructs in bash scripting  ####
1) for loops
2) Internal Field Separator (IFS)
3) Counting directories & files
4) Nested Loops
5) Redirecting loop output
6) while and until loops



1)
for loop:-

###  Basic for loop syntax:-  ###
---
for
do

done
---

# Task:- List all 5 courses that are available at Quality Thought:-

refer "for-loop-1.sh"    ===> looks very easy

refer "for-loop-2.sh" for c-language styled for-loop 
syntax used:  --> courses=(a b c d e)   ==> array of variables

# Summary of for-loop:-
In c-language styled for-loop, 'courses' was defined outside of for-loop, unlike in for-loop-1.sh
----

# Note:-
## when in doubt about the syntax, just google for "bash 'for' loop examples" --> cyberciti.biz & search for ssh


----

# IFS (Internal Field Separator):-

# By default the IFS value has one of (space, newline or tab)

# IFS is a bash variable which has the purpose of defining which type of field separator you want for your script.

refer "IFS-1.sh" :- 
this script takes 'space' as IFS because 'space' is the default IFS.
Hence, when it sees a space, it prints the next word in a separate line.    

# the only diff in 2nd script is that we are making 'newline' as the default IFS (IFS=$'\n').
2nd script:- print each line as a line & dont break each word into a line   # this is called 'iteration over lines'
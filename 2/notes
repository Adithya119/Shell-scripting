# class-2 notes

# https://directdevops.blog/2020/08/25/linux-classroom-series-25-aug-2020/

----
Assigning a variable in shell scripting:-
java_package="openjdk-11-jdk"                     # similar to Terraform but no spaces around the "=" sign.

Referencing the variable in shell scripting:-
    ${java_package} or $java_package
---

################## Note:- ###########################
In Ansible:- 
Assigning a var:-
java_package: openjdk-11-jdk

Referencing the var:-
"{{ Java_package }}"
---

In Terraform:- 
Assigning a var:-
variable "vpc_cidr" {
    default = "192.168.0.0/16"
    description = "vpc cidr"
}

Referencing the var:-
cidr_block = var.vpc_cidr
#####################################################

----
## decalring the variable  ## no space after =
name="Adithya"  ## decalring the variable  ## no space after =      ## the value can have spaces inside

echo $name  --> get me the value of the variable called as "name". The below commands also yield the same result:-
echo ${name}
### interpolating the variable into static content
echo "Name == ${name}"    ### this is how we interpolate the variable into static content

Note:-
echo name & echo "name" will print name & not the value of the variable it holds.

### refer blog for implementing the above

----

# All the variables are treated as "text" by linux until and unless you explicitly specify it's arithmetic. Hence the below will print 5 + 1 & not 6

number=5
echo $number + 1   
# refer text.sh

----

# If you want shell script to consider variable number as "integer" instead of text, we need to use this arithmetic expression:-

$(( ${number} + 1 ))
# enclose "$number + 1" within  $((  ))
Now, echo $(( ${number} + 1 )) will do the arithmetic & print 6
# refer arithmetic.sh

----
Note:-

# set
# set | less
The above commands list out all the pre-defined & user defined env variables.
----


# In shell scripting we following certain naming conventions:-

1) for variables:-
Always define variables in lowercase (underscore is optional):-
ex:-
my_number=6
java_package="openjdk-11-jdk"

2) for constants:-
Always define constants in uppercase.          #### the value(s) of constants don't usually change.
ex:-
DEFAULT_USER="jenkins"

3) Do not create variables with names which are already pre-defined (system defined) like PATH, USER, etc. --> see 'set' command output.
If you need to defined a user, use a prefix for it (ex:- JDK_PATH, DEFAULT_USER, etc.)
----


# User inputs in shell scripting:-

Basic inputs:-
# refer positional_arguements.sh

${0} stands for executable 
${1} stands for 1st positional arguement

ping google.com
# ping is executable 
# google.com is arguement

cp 1.txt 2.txt
# exec arg1 arg2 --> 1.txt & 2.txt are two positional arguments

# the above are positional arguements. Positional arguements are also called as parameters.

----

Generally, we have 2 kinds of arguements:-
1) positional arguements:-
Refer above

2) named arguements:-
ex:-
ping --count 4 google.com
# google.com is a positional argument
# where as 4 is a named argument as it is a value for a name called as count
